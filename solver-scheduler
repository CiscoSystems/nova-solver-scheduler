#!/bin/bash

# Copyright (c) 2014 Cisco Systems Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

_SCRIPT_NAME="${0##*/}"
_SCRIPT_LOGFILE="/var/log/${_SCRIPT_NAME}.log"
debug=""

_NOVA_CONF_PATH="/etc/nova"
#_NOVA_SCHEDULER_PATH="/usr/share/pyshared/nova/scheduler"
_NOVA_SCHEDULER_PATH="/usr/lib/python2.7/dist-packages/nova/scheduler/"

#Redirecting output to logfile as well as stout
exec >  >(tee -a ${_SCRIPT_LOGFILE})
exec 2> >(tee -a ${_SCRIPT_LOGFILE} >&2)





COMMANDS="\
        install        Installs Cisco's OpenStack solver scheduler.
        remove        Removes the scheduler and restores Nova's default one.
        restart        Restarts the solver scheduler.
        update        Updates the scheduler to the latest version.
        activate        Activates Cisco's OpenStack solver scheduler if it is not already active.
        deactivate        Deactivates Cisco's OpenStack solver scheduler if active.
        install-extra        (NOT IMPLEMENTED) Installs modules which have been modified to make use of Cisco's OpenStack solver scheduler. For example, savanna.
        remove-extra        (NOT IMPLEMENTED) Removes a module installed with the previous command.
        use-solver        (NOT IMPLEMENTED) Allows you to switch between different available solvers."


_info() {
    echo "[${_SCRIPT_NAME}] ($(date +"%m/%d/%Y %H:%M")) INFO: ${1}"
}


_debug() {
    if [[ -n "${debug}" ]]; then
        echo "[${_SCRIPT_NAME}] ($(date +"%m/%d/%Y %H:%M")) DEBUG: ${1}"
    else
        echo "[${_SCRIPT_NAME}] ($(date +"%m/%d/%Y %H:%M")) DEBUG: ${1}" >> "${_SCRIPT_LOGFILE}"
    fi
}


_error() {
    
    echo "[${_SCRIPT_NAME}] ($(date +"%m/%d/%Y %H:%M")) ERROR: ${1} For more information, check: ${_SCRIPT_LOGFILE}"

    exit 1
}


_help() {
    local _cmd
    for _cmd in ${COMMANDS}; do
        if [[ "${_cmd}" == "${1}" ]]; then
            _instructions "${1}"
        fi
    done
    _error "'${1}' is not a valid command."
}




_instructions() {

    if [[ $# -ne 1 ]]; then
        echo "instructions: ${_SCRIPT_NAME} [options] <command> <args>"
        echo 
        echo "Options supported:"
        echo "        -d        Print debug messages normally found in the log."
        echo "        -h        Display this message."
        echo
        echo "Commands supported:"
        echo "${COMMANDS}"
        echo
        echo "For more information on each commnand, execute '${_SCRIPT_NAME} help <command>'"
        exit 0

    fi

    local cmd_name="${1}"
    case "${cmd_name}" in
        install)
            echo "This command downloads and installs Cisco's Solver Scheduler for Nova."
            ;;
        remove)
            echo "This command completely removes Cisco's Openstack solver scheduler."
            ;;
        update)
            echo "This command updates Cisco's OpenStack Solver Scheduler to its latest version."
            ;;
        restart)
            echo "This command restarts nova-scheduler, to make sure the latest changes are detected."
            ;;
        activate)
            echo "This command activates an existing installation of Cisco's Openstack solver scheduler"
            ;;
        deactivate)
            echo "This command deactivates an existing installation of Cisco's Openstack solver scheduler"
            ;;
        install-extra)
            _error "This feature is not yet available."
            ;;
        remove-extra)
            _error "This feature is not yet available."
            ;;
        use-solver)
            _error "This feature is not yet available."
            ;;
        *)
            _error "'${cmd_name}' is not a valid command. Please run '${_SCRIPT_NAME} help' to see a list of available commands."
            ;;
    esac
    echo "Instructions: ${_SCRIPT_NAME} [options] ${cmd_name}"

    exit 0
}





perform_initial_bckups() {


    _info "Operation: Installing..."
    if [ ! -f ${_NOVA_SCHEDULER_PATH}/host_manager.py.original.bckup ]; then
        cp ${_NOVA_SCHEDULER_PATH}/host_manager.py ${_NOVA_SCHEDULER_PATH}/host_manager.py.original.bckup
    else
        cp ${_NOVA_SCHEDULER_PATH}/host_manager.py ${_NOVA_SCHEDULER_PATH}/host_manager.py.original.bckup.$(date +%s)
    fi
    if [ "$?" -ne "0" ]; then
      _error "Error creating a backup of ${_NOVA_SCHEDULER_PATH}/host_manager.py."
    fi

    if [ ! -f ${_NOVA_CONF_PATH}/nova.conf.original.bckup ]; then
        cp ${_NOVA_CONF_PATH}/nova.conf ${_NOVA_CONF_PATH}/nova.conf.original.bckup
    else
        cp ${_NOVA_CONF_PATH}/nova.conf ${_NOVA_CONF_PATH}/nova.conf.original.bckup$(date +%s)
    fi
    if [ "$?" -ne "0" ]; then
      _error "Error creating a backup of ${_NOVA_CONF_PATH}/nova.conf."
    fi

}


restart() {
    service nova-scheduler restart
}



install() {

    _debug "Installing..."

    if [[ $# -ne 1 ]]; then
        _instructions "install"
    fi

    sudo apt-get update

    _info "Installing Cisco's solver scheduler and all its dependencies ..."
    
    _info "Operation: Installing git..."
    apt-get install -y git
    if [ "$?" -ne "0" ]; then
      _error "Error installing git."
    fi

    _info "Operation: Installing Python setup tools..."
    apt-get install -y python-setuptools
    if [ "$?" -ne "0" ]; then
      _error "Error installing python-setuptools."
    fi
    
    _info "Operation: Installing pip..."
    easy_install pip
    if [ "$?" -ne "0" ]; then
      _error "Error installing pip."
    fi
    pip install setuptools --no-use-wheel --upgrade
    _info "Operation: Installing pulp..."
    pip install pulp
    pip install https://pypi.python.org/packages/source/p/pyparsing/pyparsing-2.0.1.tar.gz
    if [ "$?" -ne "0" ]; then
      _error "Error installing pulp."
    fi
   
   # Prone to breaking the whole openstack cluster. Deactivated for now....
   # _info "Operation: Installing or-tools dependencies..."
   # sudo apt-get install -y bison flex python-dev autoconf libtool zlib1g-dev openjdk-7-jdk mono-devel
   # if [ "$?" -ne "0" ]; then
   #   _error "Error installing or-tools dependencies."
   # fi

   # _info "Operation: Installing or-tools..."
   # easy_install https://pypi.python.org/packages/2.7/o/ortools/ortools-1.3069-py2.7-linux-x86_64.egg
   # if [ "$?" -ne "0" ]; then
   #   _error "Error installing or-tools."
   # fi

    _info "Operation: Downloading Cisco's Solver scheduler..."
    cd /tmp

    git clone https://github.com/CiscoSystems/nova-solver-scheduler.git
    if [ "$?" -ne "0" ]; then
      _error "Error downloading Cisco's Solver scheduler."
    fi

    perform_initial_bckups

    #The following three lines should be reduced to one.
    cp nova-solver-scheduler/nova/scheduler/host_manager.py ${_NOVA_SCHEDULER_PATH}/host_manager.py
    cp nova-solver-scheduler/nova/scheduler/solver_scheduler.py ${_NOVA_SCHEDULER_PATH}/solver_scheduler.py
    cp -r nova-solver-scheduler/nova/scheduler/solvers ${_NOVA_SCHEDULER_PATH}/
    if [ "$?" -ne "0" ]; then
      _error "Error copying the files to ${_NOVA_SCHEDULER_PATH}."
    fi

_info "Operation: Activating and configuring Cisco's Solver scheduler..."
    sed -i "/scheduler_driver/d" ${_NOVA_CONF_PATH}/nova.conf
    sed -i "/\[DEFAULT\]/a\
#This is for changing the scheduler driver used by Nova. \\
scheduler_driver = nova.scheduler.solver_scheduler.ConstraintSolverScheduler \\
 \\
#This is for changing the solver module to be used by the above solver scheduler. If you implement your own constraints modules with constraints for your use cases, update this option. \\
scheduler_host_solver = nova.scheduler.solvers.hosts_pulp_solver_v2.HostsPulpSolver \\
debug=True \\
#The following configuration options need to be added to nova.conf if using these solvers: hosts_pulp_solver_v2.py, hosts_ortools_linear_solver.py \\
#This is for setting the cost functions that are used in the solver \\
scheduler_solver_costs = RamCost, IpDistanceCost \\
 \\
#This is for setting the weight of each cost \\
scheduler_solver_cost_weights = RamCost:0.7, IpDistanceCost:0.2 \\
 \\
#This is for setting the constraints used in the solver \\
scheduler_solver_constraints = NumHostsPerInstanceConstraint, MaxDiskAllocationPerHostConstraint, MaxRamAllocationPerHostConstraint, ActiveHostConstraint " ${_NOVA_CONF_PATH}/nova.conf
    
    if [ "$?" -ne "0" ]; then
      _error "Error modifying nova.conf."
    fi

    _info "Operation: Restarting nova-scheduler..."
    restart

    _info "Cisco's Solver scheduler has been successfully installed and is ready to be used."
   rm -r /tmp/nova-solver-scheduler
    _debug "Done installing."
}

remove() {

    _debug "Removing the scheduler..."

    if [[ $# -ne 1 ]]; then
        _instructions "remove"
    fi

    _info "Operation: Removing..."
    cp ${_NOVA_SCHEDULER_PATH}/host_manager.py.original.bckup ${_NOVA_SCHEDULER_PATH}/host_manager.py
    if [ "$?" -ne "0" ]; then
      _error "Error restoring ${_NOVA_SCHEDULER_PATH}/host_manager.py."
    fi

    
    rm ${_NOVA_SCHEDULER_PATH}/solver_scheduler.py
    rm -r ${_NOVA_SCHEDULER_PATH}/solvers
    if [ "$?" -ne "0" ]; then
      _error "Error removing the files from ${_NOVA_SCHEDULER_PATH}."
    fi


    cp ${_NOVA_CONF_PATH}/nova.conf.original.bckup ${_NOVA_CONF_PATH}/nova.conf
    if [ "$?" -ne "0" ]; then
      _error "Error restoring ${_NOVA_CONF_PATH}/nova.conf."
    fi
   

    
    _info "Operation: Restarting nova-scheduler..."
    restart
    if [ "$?" -ne "0" ]; then
      _error "Error restarting nova-scheduler." 
    fi
    _debug "Done removing."
}



activate() {

    _debug "Activating Cisco's Openstack solver scheduler..."

    if [[ $# -ne 1 ]]; then
        _instructions "activate"
    fi

    _info "Operation: Activating..."
    cp ${_NOVA_SCHEDULER_PATH}/host_manager.py ${_NOVA_SCHEDULER_PATH}/host_manager.py.original.bckup
    cp ${_NOVA_SCHEDULER_PATH}/host_manager.py.solver.bckup ${_NOVA_SCHEDULER_PATH}/host_manager.py
    if [ "$?" -ne "0" ]; then
      _error "Error restoring ${_NOVA_SCHEDULER_PATH}/host_manager.py."
    fi

    cp ${_NOVA_CONF_PATH}/nova.conf ${_NOVA_CONF_PATH}/nova.conf.original.bckup
    cp ${_NOVA_CONF_PATH}/nova.conf.solver.bckup ${_NOVA_CONF_PATH}/nova.conf
    if [ "$?" -ne "0" ]; then
      _error "Error restoring ${_NOVA_CONF_PATH}/nova.conf."
    fi

    _info "Operation: Restarting nova-scheduler..."
    restart
    if [ "$?" -ne "0" ]; then
      _error "Error restarting nova-scheduler."
    fi
    _debug "Activated."
}

deactivate() {

    _debug "Deactivating Cisco's Openstack solver scheduler..."

    if [[ $# -ne 1 ]]; then
        _instructions "deactivate"
    fi

    #MISSING
    #Check if host_manager.py.solver.bckup exists
    #Check if nova.conf.solver.bckup exists

    _info "Operation: Deactivating..."
    cp ${_NOVA_SCHEDULER_PATH}/host_manager.py ${_NOVA_SCHEDULER_PATH}/host_manager.py.solver.bckup
    cp ${_NOVA_SCHEDULER_PATH}/host_manager.py.original.bckup ${_NOVA_SCHEDULER_PATH}/host_manager.py
    if [ "$?" -ne "0" ]; then
      _error "Error restoring ${_NOVA_SCHEDULER_PATH}/host_manager.py."
    fi

    cp ${_NOVA_CONF_PATH}/nova.conf ${_NOVA_CONF_PATH}/nova.conf.solver.bckup
    cp ${_NOVA_CONF_PATH}/nova.conf.original.bckup ${_NOVA_CONF_PATH}/nova.conf
    if [ "$?" -ne "0" ]; then
      _error "Error restoring ${_NOVA_CONF_PATH}/nova.conf."
    fi

    _info "Operation: Restarting nova-scheduler..."
    restart
    if [ "$?" -ne "0" ]; then
      _error "Error restarting nova-scheduler."
    fi
    _debug "Activated."
}



update() {

    _debug "Updating ..."

    if [[ $# -ne 1 ]]; then
        _instructions "update"
    fi

    remove
    install
    
    _debug "Updated."
}


if [[ ${EUID} -ne 0 ]]; then
    _error "This program needs to be run as root"
fi


# Parse any options on the command-line
while getopts 'dh' arg; do
    case "${arg}" in
        d) debug="yes";;
        h|?) _instructions ;;
        *)
            _error "Invalid option '${arg}'"
            ;;
    esac
done

shift $((OPTIND - 1))

if [[ $# -lt 1 ]]; then
    _error "Please specify a command. Run '${_SCRIPT_NAME} help' to see a list of available commands."
    _instructions
fi

cmd_name="${1}"

case "${cmd_name}" in
    install)
        install $*
        ;;
    remove)
        remove $*
        ;;
    update)
        update $*
        ;;
    restart)
        restart $*
        ;;
    activate)
        activate $*
        ;;
    deactivate)
        deactivate $*
        ;;
    install-extra)
        _error "This feature is not yet available."
        ;;
    remove-extra)
        _error "This feature is not yet available."
        ;;
    use-solver)
        _error "This feature is not yet available."
        ;;
    help)
        if [[ $# -eq 1 ]]; then
            _instructions
        elif [[ $# -eq 2 ]]; then
            _help "${2}"
        else
            _error "You need to specify one command name only. Please check '${_SCRIPT_NAME} help' for more information."
           
        fi
        ;;
    *)
        _error "'${cmd_name}' is not a valid command. Please run '${_SCRIPT_NAME} help' to see a list of available commands."
        ;;
esac


exit 0
